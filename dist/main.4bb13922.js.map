{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.js","webpack:///./src/Box.vue?a19e","webpack:///./src/Container.vue?7c91","webpack:///./src/utils.js","webpack:///./src/Box.vue?c3cc","webpack:///src/Box.vue","webpack:///./node_modules/vue-loader/lib/runtime/componentNormalizer.js","webpack:///./src/Box.vue","webpack:///./src/Box.vue?c5d1","webpack:///src/Container.vue","webpack:///./src/Container.vue?6a47","webpack:///./src/Container.vue","webpack:///./src/Container.vue?b04a","webpack:///./src/components.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","components","require","initComponent","component","install","Vue","window","use","_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_index_js_ref_0_oneOf_2_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_vue_loader_lib_index_js_vue_loader_options_Box_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__","_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_index_js_ref_0_oneOf_2_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_vue_loader_lib_index_js_vue_loader_options_Container_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__","updateBoxLayout","boxLayout","data","_objectSpread","updateBoxPosition","position","positionsAreColliding","positionA","positionB","x","w","y","h","isFree","layout","length","bubbleUp","moveBoxToFreePlace","doBubbleUp","maxColumnCount","currx","curry","maxx","isFinite","oldw","console","warn","found","ymove","sortLayout","_toConsumableArray","sort","a","b","hidden","pinned","layoutBubbleUp","newLayout","forEach","push","positionToPixels","cellSize","margin","arguments","undefined","outerMargin","getLayoutSize","reduce","width","Math","max","height","matchesSelector","el","selector","Element","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","indexOf","document","querySelectorAll","this","layoutHasCollisions","j","fixLayout","fixedLayout","src_Boxvue_type_script_lang_js_","props","boxId","required","dragSelector","type","String","default","Number","Boolean","container","dragging","resizing","computed","style","isBoxVisible","pixelPosition","getPixelPositionById","display","transform","concat","classes","dnd-grid-box","methods","findContainer","current","$parent","List","has","mounted","_this","Error","registerBox","$dragHandle","$el","$refs","dragHandle","addEventListener","evt","target","preventDefault","$emit","mouseX","clientX","mouseY","clientY","handleMouseMove","offset","handleMouseUp","removeEventListener","$resizeHandle","resizeHandle","stopPropagation","beforeDestroy","unregisterBox","normalizeComponent","scriptExports","render","staticRenderFns","functionalTemplate","injectStyles","scopeId","moduleIdentifier","shadowMode","hook","options","_compiled","functional","_scopeId","context","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","_injectStyles","originalRender","existing","beforeCreate","Box","_vm","_h","$createElement","_c","_self","ref","class","_t","_v","staticClass","Set","src_Containervue_type_script_lang_js_","Array","Infinity","maxRowCount","autoAddLayoutForNewBox","defaultSize","fixLayoutOnLoad","watch","updateLayout","placeholder","isMounted","layoutSize","ret","minWidth","minHeight","log","pinnedLayout","filter","layoutMap","map","Map","set","id","getBoxLayoutById","pixels","_pixels","getPositionByPixel","round","box","$props","enableResizing","enableDragging","createBoxLayout","initialLayout","isDragging","validateTargetPosition","targetX","targetY","$on","Containervue_type_script_lang_js_objectSpread","moveBy","_validateTargetPositi","find","_validateTargetPositi2","boxPosition","_this2","isResizing","validateTargetSize","targetW","targetH","resizeBy","_validateTargetSize","_validateTargetSize2","_this3","_len","boxIds","_key","Containervue_type_script_lang_js_toConsumableArray","created","$children","apply","delete","Container","attrs","__webpack_exports__","utils_namespaceObject"],"mappings":"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","file":"main.4bb13922.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","const components = require('./components')\nmodule.exports = components\n\nconst initComponent = (component) => {\n    component.install = Vue => Vue.component(component.name, component)\n\n    // Install by default if using the script tag\n    if (typeof window !== 'undefined' && window.Vue) {\n        window.Vue.use(component)\n    }\n}\n\nfor (let key in components) {\n    initComponent(components[key])\n}\n","import mod from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js!../node_modules/css-loader/index.js??ref--0-oneOf-2-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./Box.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js!../node_modules/css-loader/index.js??ref--0-oneOf-2-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./Box.vue?vue&type=style&index=0&lang=css&\"","import mod from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js!../node_modules/css-loader/index.js??ref--0-oneOf-2-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./Container.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js!../node_modules/css-loader/index.js??ref--0-oneOf-2-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./Container.vue?vue&type=style&index=0&lang=css&\"","// reactive box layout update\nexport const updateBoxLayout = (boxLayout, data) => {\n    return {\n        ...boxLayout,\n        ...data\n    }\n}\n\n// reactive box position update\nexport const updateBoxPosition = (boxLayout, data) => {\n    return updateBoxLayout(boxLayout, {\n        position: {\n            ...boxLayout.position,\n            ...data\n        }\n    })\n}\n\n// check if 2 positions are colliding\nexport const positionsAreColliding = (positionA, positionB) => {\n    return positionA.x < (positionB.x + positionB.w) &&\n        (positionA.x + positionA.w) > positionB.x &&\n        positionA.y < (positionB.y + positionB.h) &&\n        (positionA.y + positionA.h) > positionB.y\n}\n\n// check if position is free in layout\nexport const isFree = (layout, position) => {\n    for (let i = 0; i < layout.length; i++) {\n        if (positionsAreColliding(layout[i].position, position)) {\n            return false\n        }\n    }\n    return true\n}\n\n// moves the box to the upmost free position\nexport const bubbleUp = (layout, boxLayout) => {\n    do {\n        boxLayout = updateBoxPosition(boxLayout, {\n            y: boxLayout.position.y - 1\n        })\n    } while (isFree(layout, boxLayout.position) && boxLayout.position.y >= 0)\n    return updateBoxPosition(boxLayout, {\n        y: boxLayout.position.y + 1\n    })\n}\n\n// updates box position to a free place in a given layout\nexport const moveBoxToFreePlace = (layout, boxLayout, doBubbleUp, maxColumnCount) => {\n    if (doBubbleUp) {\n        boxLayout = bubbleUp(layout, boxLayout)\n    }\n    let currx = boxLayout.position.x // set it to 0 to start computing on x=0\n    let curry = boxLayout.position.y // set it to 0 to start computing on y=0\n    let maxx  = 0\n    if(isFinite(maxColumnCount)) {\n        if(boxLayout.position.w > maxColumnCount) {\n            let oldw = boxLayout.position.w\n            console.warn('utils::moveBoxToFreePlace: box is wider than dashboard. setting box width to maxColumnCount', boxLayout, oldw, maxColumnCount)\n            boxLayout.position.w = maxColumnCount\n        } else {\n            maxx  = maxColumnCount - boxLayout.position.w\n        }\n    }\n    let found = isFree(layout, boxLayout.position)\n    let ymove = -1 // we will first try to move the box up until y=0 and then go down\n    while (!found) {\n        while(!found && (boxLayout.position.x > 0 || !isFinite(maxColumnCount))) { // we first try to slide the box left\n            boxLayout = updateBoxPosition(boxLayout, {\n                x: boxLayout.position.x - 1\n            })\n            found = isFree(layout, boxLayout.position)\n        }\n        while(!found && (boxLayout.position.x < maxx || !isFinite(maxColumnCount))) { // then right\n            boxLayout = updateBoxPosition(boxLayout, {\n                x: boxLayout.position.x + 1\n            })\n            found = isFree(layout, boxLayout.position)\n        }\n        if(!found) { // other line to try\n            if(boxLayout.position.y == 0) {     // if box is in first row\n                boxLayout.position.y = curry    // we restart from its original position\n                ymove = 1                       // but we move down\n            }\n            boxLayout = updateBoxPosition(boxLayout, {\n                x: currx,\n                y: boxLayout.position.y + ymove\n            })\n            found = isFree(layout, boxLayout.position)\n        }\n    }\n    return boxLayout\n}\n\n// sort layout based on position and visibility\nexport const sortLayout = (layout) => {\n    return [ ...layout ].sort((a, b) => {\n        if (a.hidden && !b.hidden) {\n            return 1\n        }\n        if (!a.hidden && b.hidden) {\n            return -1\n        }\n        if (a.pinned && !b.pinned) {\n            return -1\n        }\n        if (!a.pinned && b.pinned) {\n            return 1\n        }\n        if (a.position.y < b.position.y) {\n            return -1\n        }\n        if (a.position.y > b.position.y) {\n            return 1\n        }\n        if (a.position.x < b.position.x) {\n            return -1\n        }\n        if (a.position.x > b.position.x) {\n            return 1\n        }\n        return 0\n    })\n}\n\n// moves all boxes to the upmost free position\nexport const layoutBubbleUp = (layout) => {\n    layout = sortLayout(layout)\n    let newLayout = []\n    layout.forEach(boxLayout => {\n        newLayout.push(bubbleUp(newLayout, boxLayout))\n    })\n    return newLayout\n}\n\n// get box position in pixels\nexport const positionToPixels = (position, cellSize, margin = 0, outerMargin = 0) => {\n    return {\n        x: (position.x * cellSize.w) + ((position.x) * margin) + outerMargin,\n        y: (position.y * cellSize.h) + ((position.y) * margin) + outerMargin,\n        w: (position.w * cellSize.w) + ((position.w - 1) * margin),\n        h: (position.h * cellSize.h) + ((position.h - 1) * margin)\n    }\n}\n\n// get layout bounding box\nexport const getLayoutSize = (layout) => {\n    return {\n        w: layout.reduce((width, boxLayout) => {\n            return boxLayout.hidden\n                ? width\n                : Math.max(width, boxLayout.position.x + boxLayout.position.w)\n        }, 0),\n        h: layout.reduce((height, boxLayout) => {\n            return boxLayout.hidden\n                ? height\n                : Math.max(height, boxLayout.position.y + boxLayout.position.h)\n        }, 0)\n    }\n}\n\n// check if element matches a selector\n// https://davidwalsh.name/element-matches-selector\nexport const matchesSelector = (el, selector) => {\n    var p = Element.prototype\n    var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function (s) {\n        return [].indexOf.call(document.querySelectorAll(s), this) !== -1\n    }\n    return f.call(el, selector)\n}\n\n// check if layout has collisions\nexport const layoutHasCollisions = (layout) => {\n    for (let i = 0; i < layout.length; i++) {\n        for (let j = i + 1; j < layout.length; j++) {\n            if (positionsAreColliding(layout[i].position, layout[j].position)) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n// fix layout with collisions\nexport const fixLayout = (layout, doBubbleUp, maxColumnCount) => {\n    layout = sortLayout(layout)\n    let fixedLayout = []\n    layout.forEach(boxLayout => {\n        fixedLayout.push(moveBoxToFreePlace(fixedLayout, boxLayout, doBubbleUp, maxColumnCount))\n    })\n    return fixedLayout\n}\n","import mod from \"-!../node_modules/babel-loader/lib/index.js??ref--5-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./Box.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/babel-loader/lib/index.js??ref--5-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./Box.vue?vue&type=script&lang=js&\"","<template>\n    <div\n        :class=\"classes\"\n        :style=\"style\"\n        ref=\"dragHandle\"\n    >\n        <slot></slot>\n        <div\n            class=\"resize-handle\"\n            ref=\"resizeHandle\"\n        ></div>\n    </div>\n</template>\n\n<style>\n    .dnd-grid-box {\n        position: absolute;\n        z-index: 1;\n        box-sizing: border-box;\n    }\n\n    .dnd-grid-box.dragging,\n    .dnd-grid-box.resizing {\n        z-index: 2;\n        opacity: 0.7;\n    }\n\n    .dnd-grid-box:not(.dragging):not(.resizing) {\n        transition: transform ease-out 0.1s, width ease-out 0.1s, height ease-out 0.1s;\n    }\n\n    .dnd-grid-box .resize-handle {\n        position: absolute;\n        right: -5px;\n        bottom: -5px;\n        width: 15px;\n        height: 15px;\n        cursor: se-resize;\n    }\n</style>\n\n<script>\n    import * as utils from './utils'\n    import { List as ContainerList } from './Container'\n\n    export default {\n        name: 'DndGridBox',\n        props: {\n            boxId: {\n                required: true\n            },\n            dragSelector: {\n                type: String,\n                default: '*'\n            },\n            x: {\n              type: Number,\n              default: function() { // placed automagically\n                return 0\n              }\n            },\n            y: {\n              type: Number,\n              default: function() { // placed automagically\n                return 0\n              }\n            },\n            h: {\n              type: Number,\n              default: function() { // Multiplier for virtual grid height\n                return 1\n              }\n            },\n            w: {\n              type: Number,\n              default: function() { // Multiplier for virtual grid width\n                return 1\n              }\n            },\n            pinned: {\n              type: Boolean,\n              default: function() { // placed automagically\n                return false\n              }\n            },\n            hidden: {\n              type: Boolean,\n              default: function() { // placed automagically\n                return false\n              }\n            }\n        },\n        data () {\n            return {\n                container: null,\n                dragging: false,\n                resizing: false\n            }\n        },\n        computed: {\n            style () {\n                if (this.container && this.container.isBoxVisible(this.boxId)) {\n                    var pixelPosition = this.container.getPixelPositionById(this.boxId)\n                    return {\n                        display: 'block',\n                        width: pixelPosition.w + 'px',\n                        height: pixelPosition.h + 'px',\n                        transform: `translate(${pixelPosition.x}px, ${pixelPosition.y}px)`\n                    }\n                }\n\n                return {\n                    display: 'none'\n                }\n            },\n            classes () {\n                return {\n                    'dnd-grid-box': true,\n                    'dragging': this.dragging,\n                    'resizing': this.resizing\n                }\n            }\n        },\n        methods: {\n            findContainer () {\n                let current = this\n                while (current.$parent) {\n                    current = current.$parent\n                    if (ContainerList.has(current)) {\n                        return current\n                    }\n                }\n                return null\n            }\n        },\n        mounted () {\n            this.container = this.findContainer()\n            if (!this.container) {\n                throw new Error('Can not find container')\n            }\n\n            // register component on parent\n            this.container.registerBox(this)\n\n            // moving\n            this.$dragHandle = this.$el || this.$refs.dragHandle\n            this.$dragHandle.addEventListener('mousedown', evt => {\n                if (!utils.matchesSelector(evt.target, this.dragSelector)) {\n                    return\n                }\n\n                evt.preventDefault()\n                this.dragging = true\n                this.$emit('dragStart')\n                let mouseX = evt.clientX\n                let mouseY = evt.clientY\n\n                const handleMouseUp = evt => {\n                    window.removeEventListener('mouseup', handleMouseUp, true)\n                    window.removeEventListener('mousemove', handleMouseMove, true)\n\n                    this.dragging = false\n\n                    var offset = {\n                        x: evt.clientX - mouseX,\n                        y: evt.clientY - mouseY\n                    }\n                    this.$emit('dragEnd', { offset })\n                }\n\n                const handleMouseMove = evt => {\n                    var offset = {\n                        x: evt.clientX - mouseX,\n                        y: evt.clientY - mouseY\n                    }\n                    this.$emit('dragUpdate', { offset })\n                }\n\n                window.addEventListener('mouseup', handleMouseUp, true)\n                window.addEventListener('mousemove', handleMouseMove, true)\n            })\n\n            // resizing\n            this.$resizeHandle = this.$refs.resizeHandle\n            if (this.$resizeHandle) {\n                this.$resizeHandle.addEventListener('mousedown', evt => {\n                    evt.preventDefault()\n                    evt.stopPropagation()\n                    this.resizing = true\n                    this.$emit('resizeStart')\n                    let mouseX = evt.clientX\n                    let mouseY = evt.clientY\n\n                    const handleMouseUp = evt => {\n                        window.removeEventListener('mouseup', handleMouseUp, true)\n                        window.removeEventListener('mousemove', handleMouseMove, true)\n\n                        this.resizing = false\n\n                        var offset = {\n                            x: evt.clientX - mouseX,\n                            y: evt.clientY - mouseY\n                        }\n                        this.$emit('resizeEnd', { offset })\n                    }\n\n                    const handleMouseMove = evt => {\n                        var offset = {\n                            x: evt.clientX - mouseX,\n                            y: evt.clientY - mouseY\n                        }\n                        this.$emit('resizeUpdate', { offset })\n                    }\n\n                    window.addEventListener('mouseup', handleMouseUp, true)\n                    window.addEventListener('mousemove', handleMouseMove, true)\n                })\n            }\n        },\n        beforeDestroy () {\n            // register component on parent\n            if (this.container) {\n                this.container.unregisterBox(this)\n            }\n        }\n    }\n</script>\n","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n","import { render, staticRenderFns } from \"./Box.vue?vue&type=template&id=e8d5225e&\"\nimport script from \"./Box.vue?vue&type=script&lang=js&\"\nexport * from \"./Box.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Box.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:\"dragHandle\",class:_vm.classes,style:(_vm.style)},[_vm._t(\"default\"),_vm._v(\" \"),_c('div',{ref:\"resizeHandle\",staticClass:\"resize-handle\"})],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div\n        class=\"dnd-grid-container\"\n        :style=\"style\"\n    >\n        <slot></slot>\n        <box\n            class=\"placeholder\"\n            boxId=\"::placeholder::\"\n        ></box>\n    </div>\n</template>\n\n<style>\n    .dnd-grid-container {\n        position: relative;\n        transition: min-width ease-out 0.1s, min-height ease-out 0.1s;\n    }\n\n    .dnd-grid-container .dnd-grid-box.placeholder {\n        border: 1px dashed #000;\n        background: none;\n        z-index: 0;\n    }\n\n    .dnd-grid-container .dnd-grid-box.placeholder {\n        transition: none !important;\n    }\n</style>\n\n<script>\n    import Box from './Box'\n    import * as utils from './utils'\n\n    export const List = new Set()\n\n    export default {\n        name: 'DndGridContainer',\n        components: {\n            Box\n        },\n        props: {\n            layout: {\n                type: Array,\n                required: true\n            },\n            cellSize: {\n                type: Object,\n                default () {\n                    return {\n                        w: 100,\n                        h: 100\n                    }\n                }\n            },\n            maxColumnCount: {\n                type: Number,\n                default: Infinity\n            },\n            maxRowCount: {\n                type: Number,\n                default: Infinity\n            },\n            margin: {\n                type: Number,\n                default: 5\n            },\n            outerMargin: {\n                type: Number,\n                default: 0\n            },\n            bubbleUp: {\n                type: Boolean,\n                default: false\n            },\n            autoAddLayoutForNewBox: {\n                type: Boolean,\n                required: false,\n                default: true\n            },\n            defaultSize: {\n                type: Object,\n                required: false,\n                default () {\n                    return {\n                        w: 1,\n                        h: 1\n                    }\n                }\n            },\n            fixLayoutOnLoad: {\n                type: Boolean,\n                required: false,\n                default: true\n            }\n        },\n        watch: {\n            layout (newLayout) {\n                if (this.fixLayoutOnLoad) {\n                    if (utils.layoutHasCollisions(newLayout)) {\n                        this.updateLayout(utils.fixLayout(newLayout, this.bubbleUp, this.maxColumnCount))\n                    }\n                }\n            }\n        },\n        data () {\n            return {\n                placeholder: {\n                    hidden: true,\n                    position: {\n                        x: 0,\n                        y: 0,\n                        w: 1,\n                        h: 1\n                    }\n                },\n                dragging: {\n                    boxLayout: null,\n                    offset: {\n                        x: 0,\n                        y: 0\n                    }\n                },\n                resizing: {\n                    boxLayout: null,\n                    offset: {\n                        x: 0,\n                        y: 0\n                    }\n                },\n                isMounted: false\n            }\n        },\n        computed: {\n            style () { // either use maxColumnCount/maxRowCount or try to stick around existing layout or 100%\n                var layoutSize = utils.getLayoutSize(this.layout)\n                let w = 0, h = 0\n\n                if(isFinite(this.maxColumnCount)) {\n                  w = this.maxColumnCount * this.cellSize.w +\n                      (this.maxColumnCount - 1) * this.margin + 2 * this.outerMargin + 'px'\n                } else if(layoutSize.w > 0) {\n                  w = layoutSize.w * this.cellSize.w +\n                        (layoutSize.w - 1) * this.margin + 2 * this.outerMargin + 'px'\n                } else {\n                  w = '100%'\n                }\n\n                if(isFinite(this.maxRowCount)) {\n                  h = this.maxRowCount * this.cellSize.h +\n                      (this.maxRowCount - 1) * this.margin + 2 * this.outerMargin + 'px'\n                } else if(layoutSize.h > 0) {\n                  h = layoutSize.h * this.cellSize.h +\n                      (layoutSize.h - 1) * this.margin +  2 * this.outerMargin + 'px'\n                } else {\n                  h = '100%'\n                }\n\n                let ret = { minWidth: w, minHeight: h }\n                console.log('dnd-grid-container::computed::style', ret, layoutSize, this.layout)\n                return ret\n            },\n            pinnedLayout () {\n                return this.layout.filter((boxLayout) => {\n                    return boxLayout.pinned\n                })\n            },\n            layoutMap () {\n                let map = new Map()\n                this.layout.forEach(boxLayout => {\n                    map.set(boxLayout.id, boxLayout)\n                })\n                return map\n            }\n        },\n        methods: {\n            getBoxLayoutById (id) {\n                if (id === '::placeholder::') {\n                    return this.placeholder\n                }\n                return this.layoutMap.get(id)\n            },\n            getPixelPositionById (id) {\n                if (this.dragging.boxLayout && this.dragging.boxLayout.id === id) {\n                    let pixels = utils.positionToPixels(this.dragging.boxLayout.position, this.cellSize, this.margin, this.outerMargin)\n                    pixels.x += this.dragging.offset.x\n                    pixels.y += this.dragging.offset.y\n                    return pixels\n                }\n\n                if (this.resizing.boxLayout && this.resizing.boxLayout.id === id) {\n                    let pixels = utils.positionToPixels(this.resizing.boxLayout.position, this.cellSize, this.margin, this.outerMargin)\n                    pixels.w += this.resizing.offset.x\n                    pixels.h += this.resizing.offset.y\n                    return pixels\n                }\n\n                var boxLayout = this.getBoxLayoutById(id)\n                return utils.positionToPixels(boxLayout.position, this.cellSize, this.margin, this.outerMargin)\n            },\n            isBoxVisible (id) {\n                var boxLayout = this.getBoxLayoutById(id)\n                return boxLayout && !boxLayout.hidden\n            },\n            getPositionByPixel (x, y) {\n                return {\n                    x: Math.round(x / (this.cellSize.w + this.margin)),\n                    y: Math.round(y / (this.cellSize.h + this.margin))\n                }\n            },\n            updateLayout (layout) {\n                this.$emit('update:layout', layout)\n            },\n            registerBox (box) {\n                let boxLayout = utils.moveBoxToFreePlace(this.layout, {\n                  id: box.$props.boxId,\n                  hidden: box.$props.hidden,\n                  pinned: box.$props.pinned,\n                  position: {\n                    x: box.$props.pinned ? box.$props.x : 0,\n                    y: box.$props.pinned ? box.$props.y : 0,\n                    w: box.$props.w,\n                    h: box.$props.h\n                  }\n                }, this.bubbleUp, this.maxColumnCount)\n                this.layout.push(boxLayout)\n                console.log('Container::registerBox', box.$props.boxId, boxLayout.position.w, boxLayout.position.h, boxLayout.position.x, boxLayout.position.y, this.layout)\n                this.enableResizing(box)\n                this.enableDragging(box)\n                if (this.isMounted && this.autoAddLayoutForNewBox) {\n                    this.createBoxLayout(box.$props.boxId)\n                }\n            },\n            unregisterBox (box) {\n            },\n            enableDragging (box) {\n                var initialLayout\n                var isDragging = false\n\n                let validateTargetPosition = (targetX, targetY) => {\n                    if (targetX + this.dragging.boxLayout.position.w > this.maxColumnCount) {\n                        targetX = this.maxColumnCount - this.dragging.boxLayout.position.w\n                    } else {\n                        if (targetX < 0) {\n                            targetX = 0\n                        }\n                    }\n                    if (targetY + this.dragging.boxLayout.position.h > this.maxRowCount) {\n                        targetY = this.maxRowCount - this.dragging.boxLayout.position.h\n                    } else {\n                        if (targetY < 0) {\n                            targetY = 0\n                        }\n                    }\n                    return {\n                        targetX,\n                        targetY\n                    }\n                }\n\n                box.$on('dragStart', evt => {\n                    var boxLayout = this.getBoxLayoutById(box.boxId)\n                    if (boxLayout.pinned) {\n                        return\n                    }\n                    isDragging = true\n\n                    // find box\n                    this.dragging.boxLayout = boxLayout\n                    this.placeholder = {\n                        ...this.dragging.boxLayout\n                    }\n\n                    // clone layout\n                    initialLayout = utils.sortLayout(this.layout)\n\n                    this.$emit('drag:start', initialLayout)\n                })\n\n                box.$on('dragUpdate', evt => {\n                    if (!isDragging) {\n                        return\n                    }\n                    this.dragging.offset.x = evt.offset.x\n                    this.dragging.offset.y = evt.offset.y\n\n                    var moveBy = this.getPositionByPixel(evt.offset.x, evt.offset.y)\n                    if (!utils.isFree(this.pinnedLayout, {\n                        ...this.dragging.boxLayout.position,\n                        x: this.dragging.boxLayout.position.x + moveBy.x,\n                        y: this.dragging.boxLayout.position.y + moveBy.y\n                    })) {\n                        return\n                    }\n\n                    let { targetX, targetY } = validateTargetPosition(\n                        this.dragging.boxLayout.position.x + moveBy.x,\n                        this.dragging.boxLayout.position.y + moveBy.y\n                    )\n\n                    // check if box has moved\n                    if (this.placeholder.position.x === targetX && this.placeholder.position.y === targetY) {\n                        return\n                    }\n                    this.placeholder = utils.updateBoxPosition(this.placeholder, {\n                        x: targetX,\n                        y: targetY\n                    })\n\n                    var newLayout = [ this.placeholder ]\n                    initialLayout.forEach((boxLayout) => {\n                        if (boxLayout.id === this.dragging.boxLayout.id) {\n                            return\n                        }\n                        newLayout.push(utils.moveBoxToFreePlace(newLayout, boxLayout, this.bubbleUp, this.maxColumnCount))\n                    })\n\n                    if (this.bubbleUp) {\n                        newLayout = utils.layoutBubbleUp(newLayout)\n                        this.placeholder = newLayout.find((boxLayout) => {\n                            return boxLayout.id === this.dragging.boxLayout.id\n                        })\n                    }\n                    this.updateLayout(newLayout)\n\n                    this.$emit('drag:update', newLayout)\n                })\n\n                box.$on('dragEnd', evt => {\n                    if (!isDragging) {\n                        return\n                    }\n                    var moveBy = this.getPositionByPixel(evt.offset.x, evt.offset.y)\n                    if (utils.isFree(this.pinnedLayout, {\n                        ...this.dragging.boxLayout.position,\n                        x: this.dragging.boxLayout.position.x + moveBy.x,\n                        y: this.dragging.boxLayout.position.y + moveBy.y\n                    })) {\n                        let { targetX, targetY } = validateTargetPosition(\n                            this.dragging.boxLayout.position.x + moveBy.x,\n                            this.dragging.boxLayout.position.y + moveBy.y\n                        )\n\n                        this.placeholder = utils.updateBoxPosition(this.placeholder, {\n                            x: targetX,\n                            y: targetY\n                        })\n                    }\n\n                    this.dragging.boxLayout = utils.updateBoxPosition(this.dragging.boxLayout, {\n                        x: this.placeholder.position.x,\n                        y: this.placeholder.position.y\n                    })\n\n                    var newLayout = [ this.dragging.boxLayout ]\n                    initialLayout.forEach((boxPosition) => {\n                        if (boxPosition.id === this.dragging.boxLayout.id) {\n                            return\n                        }\n                        newLayout.push(utils.moveBoxToFreePlace(newLayout, boxPosition, this.bubbleUp, this.maxColumnCount))\n                    })\n\n                    if (this.bubbleUp) {\n                        newLayout = utils.layoutBubbleUp(newLayout)\n                    }\n                    this.updateLayout(newLayout)\n\n                    this.dragging.boxLayout = null\n                    this.dragging.offset.x = 0\n                    this.dragging.offset.y = 0\n\n                    this.placeholder.hidden = true\n                    isDragging = false\n\n                    this.$emit('drag:end', newLayout)\n                })\n            },\n            enableResizing (box) {\n                var initialLayout\n                var isResizing = false\n\n                let validateTargetSize = (targetW, targetH) => {\n                    if (this.resizing.boxLayout.position.x + targetW > this.maxColumnCount) {\n                        targetW = this.maxColumnCount - this.resizing.boxLayout.position.x\n                    } else {\n                        if (targetW < 1) {\n                            targetW = 1\n                        }\n                    }\n                    if (this.resizing.boxLayout.position.y + targetH > this.maxRowCount) {\n                        targetH = this.maxRowCount - this.resizing.boxLayout.position.y\n                    } else {\n                        if (targetH < 1) {\n                            targetH = 1\n                        }\n                    }\n                    return {\n                        targetW,\n                        targetH\n                    }\n                }\n\n                box.$on('resizeStart', evt => {\n                    var boxLayout = this.getBoxLayoutById(box.boxId)\n                    if (boxLayout.pinned) {\n                        return\n                    }\n                    isResizing = true\n\n                    // find box\n                    this.resizing.boxLayout = boxLayout\n                    this.placeholder = {\n                        ...this.resizing.boxLayout\n                    }\n\n                    // clone layout\n                    initialLayout = utils.sortLayout(this.layout)\n\n                    this.$emit('resize:start', initialLayout)\n                })\n\n                box.$on('resizeUpdate', evt => {\n                    if (!isResizing) {\n                        return\n                    }\n                    this.resizing.offset.x = evt.offset.x\n                    this.resizing.offset.y = evt.offset.y\n\n                    var resizeBy = this.getPositionByPixel(evt.offset.x, evt.offset.y)\n                    if (!utils.isFree(this.pinnedLayout, {\n                        ...this.resizing.boxLayout.position,\n                        w: this.resizing.boxLayout.position.w + resizeBy.x,\n                        h: this.resizing.boxLayout.position.h + resizeBy.y\n                    })) {\n                        return\n                    }\n\n                    let { targetW, targetH } = validateTargetSize(\n                        this.resizing.boxLayout.position.w + resizeBy.x,\n                        this.resizing.boxLayout.position.h + resizeBy.y\n                    )\n\n                    // check if box size has changed\n                    if (this.placeholder.position.w === targetW && this.placeholder.position.h === targetH) {\n                        return\n                    }\n                    this.placeholder = utils.updateBoxPosition(this.placeholder, {\n                        w: targetW,\n                        h: targetH\n                    })\n\n                    var newLayout = [ this.placeholder ]\n                    initialLayout.forEach((boxLayout) => {\n                        if (boxLayout.id === this.resizing.boxLayout.id) {\n                            return\n                        }\n                        newLayout.push(utils.moveBoxToFreePlace(newLayout, boxLayout, this.bubbleUp, this.maxColumnCount))\n                    })\n\n                    if (this.bubbleUp) {\n                        newLayout = utils.layoutBubbleUp(newLayout)\n                        this.placeholder = newLayout.find((boxLayout) => {\n                            return boxLayout.id === this.resizing.boxLayout.id\n                        })\n                    }\n                    this.updateLayout(newLayout)\n\n                    this.$emit('resize:update', newLayout)\n                })\n\n                box.$on('resizeEnd', evt => {\n                    if (!isResizing) {\n                        return\n                    }\n                    var resizeBy = this.getPositionByPixel(evt.offset.x, evt.offset.y)\n                    if (utils.isFree(this.pinnedLayout, {\n                        ...this.resizing.boxLayout.position,\n                        w: this.resizing.boxLayout.position.w + resizeBy.x,\n                        h: this.resizing.boxLayout.position.h + resizeBy.y\n                    })) {\n                        let { targetW, targetH } = validateTargetSize(\n                            this.resizing.boxLayout.position.w + resizeBy.x,\n                            this.resizing.boxLayout.position.h + resizeBy.y\n                        )\n\n                        this.placeholder = utils.updateBoxPosition(this.placeholder, {\n                            w: targetW,\n                            h: targetH\n                        })\n                    }\n\n                    this.resizing.boxLayout = utils.updateBoxPosition(this.resizing.boxLayout, {\n                        w: this.placeholder.position.w,\n                        h: this.placeholder.position.h\n                    })\n\n                    var newLayout = [ this.resizing.boxLayout ]\n                    initialLayout.forEach((boxPosition) => {\n                        if (boxPosition.id === this.resizing.boxLayout.id) {\n                            return\n                        }\n                        newLayout.push(utils.moveBoxToFreePlace(newLayout, boxPosition, this.bubbleUp, this.maxColumnCount))\n                    })\n\n                    if (this.bubbleUp) {\n                        newLayout = utils.layoutBubbleUp(newLayout)\n                    }\n                    this.updateLayout(newLayout)\n\n                    this.resizing.boxLayout = null\n                    this.resizing.offset.x = 0\n                    this.resizing.offset.y = 0\n\n                    this.placeholder.hidden = true\n\n                    this.$emit('resize:end', newLayout)\n                })\n            },\n            createBoxLayout (...boxIds) {\n                boxIds = boxIds.filter(boxId => !this.getBoxLayoutById(boxId))\n\n                if (boxIds.length) {\n                    let newLayout = [\n                        ...this.layout\n                    ]\n                    boxIds.forEach(boxId => {\n                        newLayout.push(utils.moveBoxToFreePlace(newLayout, {\n                            id: boxId,\n                            hidden: false,\n                            position: {\n                                x: 0,\n                                y: 0,\n                                ...this.defaultSize\n                            }\n                        }, this.bubbleUp, this.maxColumnCount))\n                    })\n                    this.updateLayout(newLayout)\n                }\n            }\n        },\n        created () {\n            List.add(this)\n        },\n        mounted () {\n            this.isMounted = true\n            let boxIds = this.$children.map(box => box.$props.boxId)\n            this.createBoxLayout(...boxIds)\n        },\n        beforeDestroy () {\n            List.delete(this)\n        }\n    }\n</script>\n","import mod from \"-!../node_modules/babel-loader/lib/index.js??ref--5-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./Container.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/babel-loader/lib/index.js??ref--5-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./Container.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Container.vue?vue&type=template&id=6d7fd470&\"\nimport script from \"./Container.vue?vue&type=script&lang=js&\"\nexport * from \"./Container.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Container.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"dnd-grid-container\",style:(_vm.style)},[_vm._t(\"default\"),_vm._v(\" \"),_c('box',{staticClass:\"placeholder\",attrs:{\"boxId\":\"::placeholder::\"}})],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import Container from './Container'\nimport Box from './Box'\nimport * as utils from './utils'\n\nexport {\n    Container,\n    Box,\n    utils\n}\n"],"sourceRoot":""}